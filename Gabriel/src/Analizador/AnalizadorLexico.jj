PARSER_BEGIN(lexer)
class lexer
{  
	public static void main(String[] args) throws ParseException, FileNotFoundException
	{
		try
		{
			lexer analizador=new lexer(new FileInputStream("src/prueba.txt"));
			//analizador.Start();
			analizador.programa();
			System.out.println("La cadena fué aceptada");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			//system.out.println("Se han encontrado errores, falló al compilar");
		}
	}
}
PARSER_END(lexer)
/* Ignorados */
SKIP: {" " | "\t" | "\r" | "\n" }

/* Palabras Reservadas */
TOKEN :
{
< MODIFIER: "private" | "public"| "protected" >
| < CLASS: "class" >
| < TYPE_SPECIFIER: "boolean" | "int"|"float" |"string" >
| < IF: "if" >
| < WHILE: "while" >
| < VOID: "void" >
| < MAIN: "main" >
| < ELSE: "else" >
| < ELSEIF: "elseif" >
}

/* Separadores */
TOKEN :
{
  < PARENIZQ: "(" >
| < PARENDER: ")" >
| < LLAVEIZQ: "{" >
| < LLAVEDER: "}" >
| < SEMICOLON: ";" >
| < COMILLASDOBLES: "\""> 
}


/* Operadores */
TOKEN :
{
< ASSIGN: "=" >
| < EXPRESSION: ">" | "<" | "==" | "<=" | ">=" | "!=" >
| < MAS: "+" >
| < MENOS: "-" >
| <DIVISION:"/">
| <MULTIPLICACION:"*">
}

/* Literales */
TOKEN:
{
< INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* >
|< BOOLEAN_LITERAL: "false" | "true" >
|< FLOAT_LITERAL: ["0"-"9"]+["."] (["0"-"9"])+  >
|< STRING_LITERAL: <COMILLASDOBLES> ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])["a"-"z","A"-"Z","0"-"9"," ",":",";","."]*> <COMILLASDOBLES>>
}

/* Identificador */
TOKEN:
{
	< IDENTIFIER:(["a"-"z","_"])* >{identificadores.add(image.toString());}
}
/* operadores logicos*/

void programa():{}{
	try{
		<MODIFIER> <CLASS> <IDENTIFIER> <LLAVEIZQ> (variable_declaracion()| sentencia())* <LLAVEDER>
	}catch(ParseException e){
		System.out.println("Error de Sintaxis");
		System.out.println(e.toString());
	}
	
}
/*Métodos para field_declaracion*/
void field_declaracion():{}{
	variable_declaracion()
}

void variable_declaracion():{}{
	<MODIFIER> type() variable_declarator()<SEMICOLON>
}

void type():{}{
	<TYPE_SPECIFIER>
}

void variable_declarator():{}{
	<IDENTIFIER> <ASSIGN> (<INTEGER_LITERAL> | <BOOLEAN_LITERAL> | <FLOAT_LITERAL> | <STRING_LITERAL> )
}

/*Metodos para sentencia*/
void sentencia():{}{
	variable_declaracion() 
	| if_sentencia() 
	| while_sentencia()
	| for_sentencia()
}
void if_sentencia():{}{
	<IF> <PARENIZQ> <PARENDER> <LLAVEIZQ> sentencia()<LLAVEDER>(else_sentencia()| sentencia()| elseif())*
}
void else_sentencia():{}{
	<ELSE><LLAVEIZQ> expresion() <LLAVEDER> | <ELSEIF> <PARENIZQ> A() <PARENDER> <LLAVEIZQ> sentencia() <LLAVEDER>
}
vod elseif(){}{
	<ELSEIF><LLAVEIZQ> expresion()<LLAVEDER> sentencia()
}
//fin de la sentencia if

//sentencia while
void while_sentencia():{}{
	<WHILE> <PARENIZQ> expression() <PARENDER> <LLAVEIZQ> expresion <LLAVEDER> sentencia()
}

void expresion():{}{
	testing_expresion()
}

void testing_expresion():{}{
	(<INTEGER_LITERAL> | <IDENTIFIER>) <EXPRESSION> (<INTEGER_LITERAL> | <IDENTIFIER>)
}
void tipodedato(){}{
	 <INTEGER_LITERAL>
	|<BOOLEAN_LITERAL>
	|<STRING_LITERAL>
	|<FLOAT_LITERAL>
}
